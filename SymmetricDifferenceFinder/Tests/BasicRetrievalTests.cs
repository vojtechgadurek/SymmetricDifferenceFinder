using BenchmarkDotNet.Attributes;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.Diagnostics.Tracing;
using RedaFastaTest;
using SymmetricDifferenceFinder.Improvements;
using SymmetricDifferenceFinder.RetrievalTesting.BatteryTests;
using SymmetricDifferenceFinder.RetrievalTesting.SimpleTests;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using static System.Net.Mime.MediaTypeNames;

namespace SymmetricDifferenceFinder.Tests
{
    public static class BasicRetrievalTests
    {
        public static void TestIBLT()
        {
            var test = Combinations.Combinations.IBLT();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetNoConflictFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.78, 0.82, 0.001, size);
            var factory = new RetrievalTestFactory<IBLTTable, IBLTTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomKMerData(x, 31).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }

        public static void TestIBLT2()
        {
            var test = Combinations.Combinations.IBLT();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.75, 0.81, 0.001, size);
            var factory = new RetrievalTestFactory<IBLTTable, IBLTTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomData(x).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }

        public static void TestIBLT3()
        {
            var test = Combinations.Combinations.IBLT();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.01, 1, 0.01, size);
            var factory = new RetrievalTestFactory<IBLTTable, IBLTTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomData(x).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }


        public static void TestIBLTMassager()
        {
            var test = Combinations.Combinations.IBLT();

            var decoderFactoryFactory = test.DecoderFactoryFactory;

            test.SetDecoderFactoryFactory((hfs) => new HyperGraphMassagerFactory<NumberStringFactory, IBLTTable>(
                hfs,
                (HyperGraphDecoderFactory<IBLTTable>)decoderFactoryFactory(hfs)));

            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetNoConflictFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.9, 30, 0.05, size);

            var factory = new RetrievalTestFactory<IBLTTable, IBLTTable>(test, hashingFunction, (int x) => StringDataFactory<NumberStringFactory, None>.GetRandomStringData(x, 30).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }



        public static void TestHPW3()
        {
            var test = Combinations.Combinations.HPW();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamilyLastWeaker(4, new LinearCongruenceFamily()).GetNoConflictFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.7, 0.82, 0.005, size);
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomData(x).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }


        public static IEnumerable<BatteryDecodingResult> TestMassagers(double start, double end, double step, int testsInBattery, int lengthKMer, int size, IHashingFunctionFamily hfFamily, Type stringFactory, Type pipeline)
        {
            return (IEnumerable<BatteryDecodingResult>)typeof(BasicRetrievalTests).GetMethod(nameof(TestMassagersGeneric))!.MakeGenericMethod([stringFactory, pipeline]).Invoke(null, new object[] { start, end, step, testsInBattery, lengthKMer, size, hfFamily })!;
        }

        public static IEnumerable<BatteryDecodingResult> TestMassagersGeneric<TStringFactory, TPipeline>(double start, double end, double step, int testsInBattery, int lengthKMer, int size, IHashingFunctionFamily hfFamily)
        where TStringFactory : struct, IStringFactory
        where TPipeline : struct, IPipeline
        {
            var test = Combinations.Combinations.HPW();

            Func<int, IEnumerable<Expression<HashingFunction>>> hf = (int size) =>
            {
                var result = new List<Expression<HashingFunction>>();
                var counter = 0;
                var hfSize = 0; //= size / 20;
                //result.Add(Utils.HashingFunctionFilter.Filter(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create(), (1, 500), 0));

                //result.Add(Utils.HashingFunctionFilter.Filter(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create(), (1, 20), 0));

                //result.Add(Utils.HashingFunctionFilter.Filter(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create(), (1, 500), 0));


                int rounds = 8;
                //counter += hfSize;

                hfSize = (size - counter) / 2;
                result.Add(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create());
                counter += hfSize;
                hfSize = (size - counter);
                result.Add(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create());


                //counter += hfSize;
                //result.Add(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create());
                //counter += hfSize;



                //for (int i = 0; i < rounds; i++)
                //{
                //    result.Add(hfFamily.GetScheme((ulong)hfSize, (ulong)counter).Create());
                //    counter += hfSize;
                //}
                return result;
            };

            var hashingFunction = hf;//HashingFunctionCombinations.GetFromSameFamily(3, hfFamily).GetFactory();


            var decoderFactory = test.DecoderFactoryFactory;
            Random random = new Random(2024_1);


            test.SetDecoderFactoryFactory((hfs) => new MassagerFactory<TStringFactory, TPipeline>(
                hfs,
                (HPWDecoderFactory<XORTable>)decoderFactory(hfs)));

            var batteryTest = new BatteryTest(start, end, step, size);


            //Func<int, ulong[]> datafactory = (int x) => new ulong[] { 5288155205782405047, 1154549806046341607, 4618199224185366419, 26052823031914051, 104211292127656199, 416845168510624787, 1667380674042499143, 6669522696169996571, 6610801993871281611, 14478642770172187043, 2574338859560093319, 7885513937250455863, 4295933605542389859, 17183734422169559427, 13394705467549582851, 13793803250061620371, 11401102669988257815, 7779641730769933131, 1944910432692483283, 10247552004575987123, 4096719870884845251, 8965530886213884115, 10207285713028869159, 3935654704696373395, 8786997704648444259, 7630243054013319463, 12074228142343726231, 3019600600652249383, 5366586168590450251, 10565018579002388371, 10396144130498795411, 1172772093644019603, 10565018579002388403, 5366586168590450379, 3019600600652249895, 12038199345324762263, 7621235854758578471, 8786997704648477027, 3935091754742952083, 10207144975540513831, 8965530886215981267, 4096711074791823043, 10247549805552731571, 1944910432826701011, 7779641731306804043, 11401102635628519447, 13793803258651554963, 13394705465402099203, 17183734421632688515, 4295933605408172131, 7885516136273711415, 2574338859551704711, 14478642770170089891, 6610942731359636939, 6669522696169865499, 1667380674042466375, 416845168510616595, 104211292127654151, 26052823031913539, 4618199224185366291, 1154549806046341575, 9512009488366361203, 12946855122902985475, 3236713780725746371, 10032550482036212403, 1723485815809847763, 4085798918947804203, 9129028979248012595, 3714126946254778691, 928531736563694675, 4843818952568311575, 12741665400087720931, 8373189216783448307, 952461590598467119, 523324326048965519, 4742517099939629283, 5617309577173240803, 3755171832566767759, 5550478976569079843, 5999305762569657867, 10723198477497190275, 2680799619374297571, 5410168185783466615, 3193928669424314835, 12775714677697259331, 14209370563369934083, 1497250032351081479, 3450411806660373739, 5509256443907752055, 2521493747129967311, 630373436782491827, 2104275009614650871, 2345241349012599691, 2345241349012599683, 4410118018828344823, 630373436782491699, 2521493747129966799, 5545285240926716023, 3450411806660365547, 1499501832164766727, 14209933513323355395, 12775855415185614659, 3193963853796403667, 5410176981876488823, 2680799619340743139, 10723198477362972547, 5999305762032786955, 5550478974421596195, 3755171823976833167, 5617309579320724451, 4742516962500675811, 523323776293151631, 952461590632021551, 8373180420690426099, 12741665400089818083, 4843678215079956247, 927968786610273363, 3711875146441093443, 9129028979248020787, 4049770121928840235, 1723485815809848275, 9456089729732788915, 930870771512052419, 3723483086048209667, 2506168056254750755, 5238228032491075595, 15144615063404932611, 17600882878347769731, 4405302955283349219, 4912964947921041463, 1205115717974614227, 4820462871898456899, 835107413884275971, 3340429655537103875, 9215440351016852039, 2303860087754213011, 575965021938553255, 4755677273912026219, 1188919318478006555, 297229829619501639, 13909365512687039123, 10885982568390523847, 6650442126142992151, 8155024430862416979, 13457045950088529843, 1353182377831810335, 5412729511327241335, 2516109352183827231, 12816695886397654899, 14373295398171516355, 2152949371557410567, 8611797486229642259, 8919584400232824099, 8661551263707414819, 16199460981120107651, 2364402925837943939, 5202786749886873891, 8919584400232824291, 8395624704115858451, 2098906176028964615, 14359784599289404867, 12813318186677127027, 2516109352184023839, 5412518405094708343, 1353129601273677087, 13457045950101112755, 8155021132327533651, 6650441301509271319, 10885982362232093639, 13909365515908264595, 297229842504403527, 1188919370017614107, 4755677480070456427, 575965846572274087, 2303863386289096339, 9215453545156385351, 3340429655533958147, 835107413883489539, 4820462871898260291, 1205115717974565075, 4912964947921029175, 4459346150811795171, 17600882878347768963, 16009306191860067843, 8696992546311616523, 16127684483318329811, 7990419560117254455, 1997604890029313615, 14334459277789492115, 3583614819447373031, 895903704861843259, 223975926215460815, 55993981553865203, 13998495388466303, 3174750854168920051, 3459639419782320071, 13902525519283617587, 269869856005815503, 1079479424023262011, 1382608503204155471, 4957338144228426771, 1239334536057106695, 309833634014276675, 13912516463785732883, 3478129115946433223, 14210060583374352179, 1500010112368753867, 2071958400498645227, 5553417724190510263, 2435340409244859279, 5220521120738602723, 4930596947711176171, 1275643717135153071, 5102574868540612275, 1963555400452897487, 5499489710548976411, 12970142333536808163, 3746770296682032355, 5499489710548976443, 1387094648149473999, 4958459680464756403, 1239614920116189103, 4921589748456435179, 5220521120738635491, 2435340409244990351, 5553276986702154935, 2071958400500742379, 1500001316275731659, 14210058384351096627, 3478129116080650951, 13912516464322603795, 309833636161760323, 1239334544647041287, 4957338178588165139, 1382608640643108943, 1079479423889044283, 269869855972261071, 13902525519275228979, 3459674604154408903, 3174750854168395763, 14561445341887615, 58245781367550451, 232983125470201807, 931932501880807227, 3727730007523228903, 14910920030092915603, 4120987430458442831, 10253618894469386515, 6104894811675687947, 5972835172993200163, 5444596618263249035, 2160611796101827871, 9763524985880232775, 11664253283324834003, 2916063320831208503, 4350226841282424187, 1335175462158797507, 333793865539699379, 1713356736431873779, 6853426945727495111, 8966963709200428819, 4252701930525012675, 1063175482631253171, 265793870657813295, 66448467664453323, 9239984153770889139, 1215902129239179219, 4863608516956716875, 1007689994117315879, 2846339855579857039, 711584963894964259, 4789582259401128971, 1197395564850282243, 14134406946494734275, 13874287467295833795, 156917648054680323, 627670592218721291, 2288997942310511071, 572249485577627767, 572249485577627775, 204839359661191215, 51209839915297803, 12802459978824451, 13838258670276869827, 14134406946494742467, 1197395564850315011, 4789582259401260043, 711584963895488547, 2846339855581954191, 1007681198024293671, 4863606317933461323, 1215901579483365331, 9239984154307760051, 66448469811936971, 265793879247747887, 1063175516990991539, 4252702067963966147, 8966963709066211091, 6853426945693940679, 1713356736423485171, 333829049911788211, 1335316199647152835, 4350226841282293115, 2918315120644893751, 11673260482579574995, 9799553782899196743, 2304726984177683743, 5444596618263248907, 5972835172993200131, 6104894811675687939, 10051414987758316339, 3312171803614162119, 12449570620909494407, 16101260710407490643, 8848548696054772235, 6823823192441080963, 1705955798110270243, 8298813427087594163, 12788758788057208627, 3653806317434645275, 1952218928860422515, 3120668857825669559, 12482675431302678227, 13037213577791609667, 13698568722397168867, 5681232433860686867, 4278185661733195847, 17112742646932783379, 4304908082309612167, 14911285075859566755, 6857629054834590915, 8983772145628812035, 13779816508440757699, 12668326163964965235, 3112351035247870047, 791770385247810327, 9421314633166728391, 14723025518768166867, 3551869853944012619, 2164820674205212339, 541205168551303087, 541205168551303079, 2164820674205212307, 4128330606247436107, 14867140706844022739, 9421314633166726343, 791770385247802135, 3114602835061555295, 12668326163964834163, 13779816508440233411, 8983807330000900867, 6857637850927613123, 14911285075826012323, 4304908082175394439, 17112742784371736851, 4278185696092934215, 5681232442450621459, 13698568688037430499, 13037213578328480579, 12482675431436895955, 3120668857859223991, 1952210132767400307, 3653806317436742427, 12788618050568853299, 8298813427087725235, 1703703998296584995, 6814815993186339971, 8812519899035808267, 16101260710407491155, 11873109868606070919, 3312171803614162151, 5502317160601618551, 5039447974439478547, 10483234030464645447, 7232494526043549267, 11031495668365663127, 2757873917091415783, 5106186090483213943, 1978000288223304147, 7912001152893216587, 6784186784553864327, 1696046696138466083, 8305983795007967927, 11635217964577123891, 2908804491144280975, 14562259178068233955, 3640564794517058491, 910141198629264623, 227535299657316155, 56883824914329039, 9237592993083358067, 2379218261818949587, 9516873047275798343, 1174004041684090131, 4696016166736360515, 337320593235890435, 1349282372943561731, 4606620336824881531, 3141773893387436083, 12567095573549744327, 3242512580431717959, 810628145107929491, 9426029073131758183, 1860749500818141687, 810628145107929523, 3242512580431718087, 12422980385473888455, 3105745096368472115, 4606620336824889723, 1347030573129876483, 336757643282469123, 4695875429248005187, 1173968857312001299, 9516864251182776135, 2379216062795694035, 9237592993217575795, 56883825451199951, 227535301804799803, 910141207219199215, 3640564828876796859, 14562259315507187427, 2908805040900094863, 11635220163600379443, 8305983794999579319, 1696081880510554915, 6784327522042219655, 7912001152893085515, 1978000288223271379, 5106186090483205751, 2793902714110379751, 11175610856441518999, 7808955278346972755, 12789077039678339399, 14262820011294254355, 5481506987415779083, 15205434802136108483, 14474673649075811203, 2558462375174589955, 4561040561059052855, 4041909855374336051, 8355515567314119635, 2088878891828529911, 427813712023784639, 130554930739283119, 32638732684820779, 8159683171205195, 13837097976074965011, 13806127417035784131, 13546955174180002051, 3386738793545000515, 5458370716813638035, 1364592679203409511, 7268514583126411187, 10627314258796093127, 3191855898281382459, 4016331477351525499, 1352412498249433379, 8921071416495753143, 11613740827209059347, 13609934147965188947, 4184623315521107139, 14844761556637955379, 4038814005423166667, 6694683390794387411, 9280791865642011811, 57419828787236003, 6694683390794387443, 3462353253119743179, 14700646368562099507, 4184623315521109187, 13600926948710447955, 11613740827209092115, 8920508466542331831, 1352412498249957667, 4016296292979436667, 3191855898289771067, 10627312059772837575, 7268514033370597299, 1364592679740280423, 5458370718961121683, 3386738802134935107, 13546955208539740419, 13806127416498913219, 13837098525830778899, 8161882194460747, 32647528777842987, 130590115111371951, 427813712023260351, 2089441841781951223, 8357767367127804883, 4041909855374327859, 4597069358078016823, 2558462375174589443, 14474673649075811075, 17453726467551116483, 8975117635315167027, 9170576494760917059, 16127702178972392979, 13018512360535195779, 4466745900006315491, 1116686475001578875, 3081307757322707187, 8140243436935527511, 2035060859233881879, 5120451233235858375, 1280112808308964595, 865906894118833075, 3463627576475332303, 5496378909512350707, 77809002476661987, 311236009906647951, 950572048916265711, 4849329030656454331, 1472360560315917283, 5889442241263669131, 2093383399165989307, 523345849791497327, 4742522480875262235, 1185630620218815559, 14131465710336867603, 8144552446011604807, 2036138111502901203, 509034527875725303, 148388776067969779, 593555104271879119, 2374220417087516467, 9496881668350065859, 273509631495290051, 9291749444728598323, 3490579171812773843, 13262870890970854131, 509034527875726611, 2036138111502906439, 7989452513767636683, 1997363128441909171, 1185630620219150779, 4742522480876603115, 523345849796860847, 2093383399187443387, 1244944047084375947, 311236011771093987, 77809002942773499, 950572054408510451, 3463627576504464271, 865906894126116067, 5496379261016014067, 3538772970354504647, 12407435969744325555, 1280135304543419479, 3081307757322714299, 2035420798985160059, 8141683195940640227, 13018512360535195891, 1139722619083382291, 4558890476333529155, 4612829561672436619, 1153207390418109155, 4899987866031915195, 2293691344074309355, 1459170746233841675, 14199850741840624131, 17385020740742319747, 15335917798027094787, 6003438970979724295, 5567011810209345555, 3821303167127830607, 10303199108231344035, 5800618452916634839, 4755729737956987731, 576174878118399299, 2304699512473597187, 9218798049894388739, 18428448125868003331, 4610063075981148419, 5764201787422675011, 6052736465283056659, 13762981426273190819, 3837060542900731971, 10182637172579958803, 13833839817135286483, 4095179337106788355, 1023794834276697091, 14091006763851337987, 12746123727817610307, 17021588987236566291, 13456840624100424771, 18068526642527812675, 17021588987236566275, 12746123727817610243, 14091006763851337731, 1023794834276696067, 4095179337106784259, 13834965717042129107, 10182637172579893267, 3837060542900469827, 13762999018459235235, 6052736465278862355, 5764201787405897795, 4610063075914039555, 18428448194587480067, 9218798067074257923, 2304699516768564483, 576174879192141123, 4755729738225423187, 5800618452983743703, 10303198008719716259, 3821303167132024911, 5567011810210394131, 6003438970979986439, 15335917798027160323, 17383894840835477123, 14195347142213253635, 1441156347724359691, 2293691344074309611, 4611757489880203451, 285885811262179, 1143543245048715, 10368657419917595271, 2592164354979398819, 5259727107172237611, 5926617795220447307, 1481654448805111827, 4982099630628665863, 5857210926084554371, 10687674768375914403, 5805985596865752731, 1820901177630341627, 455225294407585407, 2648196725217142515, 10592786900868570051, 5477659456055176963, 3463893750511156227, 13855575002044624899, 82067787049844743, 328271148199378975, 864416599665167855, 5252338371190063607, 2562609411050702803, 4048731775493732663, 4108262429392141627, 15241025295857368979, 10391966649145611139, 4674378449163341315, 250769722943813635, 1003078891775254539, 4012315567101018155, 6340285629151659299, 8856816852487635623, 10808443444142690631, 6340285629151659283, 4300545943252729899, 1075136485813182475, 268784121453295619, 4678882048790711811, 10393092549052453763, 15241025295857303443, 4108332798136319291, 4048731775492684087, 2562613809097213907, 5252339470701691383, 864416599598058991, 328271216918855711, 82067804229713927, 13855575006339592195, 3463893751584898051, 5477659456323612419, 10592786900935678915, 2648196725233919731, 455220896361074303, 1820883585444297211, 5805985596866014875, 10687393293399203747, 5856085026177711747, 4977596031001295367, 1463640050295629843, 5854560201182519371, 4971496731020525867, 1439242850372551843, 5756971401490207367, 4985690080498890999, 1496016248286012383, 5984064993144049523, 5489515898866646467, 3511319521757034243, 9160553892384166387, 840880126983893035, 3363520507935572131, 13454082031742288515, 16922839979550050819, 9178274694736861271, 2294568673684215319, 13150602416049258675, 15708921516777931459, 7495453845983070983, 11535071310222732307, 9246797093471825987, 93700226468200719, 374800905872802879, 1499203623491211507, 5996814493964846027, 5540513902149832491, 3715311534889778339, 13097575061369523507, 4104752337107798551, 3124441450549289171, 781110362637322295, 195277590659330575, 13883877452946996355, 12694341400091524899, 8081721644141346583, 12396957386877657031, 12694341400091524883, 13883877452946996291, 195277590659330319, 781110362637321271, 3124441450549285075, 4105878237014641175, 13097575061369457971, 3715381903633956003, 5540531494335876907, 5996818892011357131, 1499204723002839283, 374801180750709823, 93700295187677455, 9246797110651695171, 11535071314517699603, 7495453847056812807, 15708921517046366915, 13150602416116367539, 2294567574172587543, 9178270296690350167, 16922839979551099395, 13454082031742550659, 3363520507935637667, 840880126983909419, 9156050292756795891, 3511319521757035267, 5489515898866646723, 5984064993144049587, 1212377584626693039, 4849510338506772155, 4463081510888371699, 17339575209674403971, 16069071953085292291, 4542487964425191179, 5747308009533685699, 13849680943433367779, 58491552604816259, 233966210419265039, 935864841677060151, 2581671592333983951, 14480475953365659699, 4555117646203194819, 4363794260905894659, 1090948565226473667, 9496109178161394227, 3965240784316122067, 15860963137264488259, 8103620327929298187, 2270879591652958963, 530716730901909695, 2122866923607638779, 8491467694430555111, 15519126704012668819, 6736274594922020419, 8498354305978530051, 9191985442953883811, 6846460379689619499, 8939097445048926371, 3890619662518407107, 10196026952484377587, 253170198135187667, 9476542234989963475, 10196026952484377555, 3890619662518406979, 9083212633124782243, 6882489176708583467, 9191985442953875619, 8500606105792215299, 6736837544875441731, 15519267441501024147, 8491502878802643943, 2122875719700660987, 530718929925165247, 2270879591518741235, 8103620465368251659, 15860963171624226627, 3965240792906056659, 9496109143801655859, 1090948427787520195, 4363793711150080771, 4555117646236749251, 14480467157272637491, 2581636407961895119, 935864841677584439, 233966210419396111, 58491552604849027, 13849680943433375971, 4555117646236749251, 14480467157272637491, 2581636407961895119, 935864841677584439, 233966210419396111, 58491552604849027, 13849680943433375971, 5711279212514721731, 4398372776349335307, 16069071953085292419, 15033732200460710019, 4463081510888371707, 312974385453355895, 1251897541813423583, 616589019495860923, 154147254873965231, 38536813718491307, 9634203429622827, 4614094569284793611, 14988581697603362115, 8358831442828228435, 11686404498151964195, 8592877497424693111, 2148219374356173279, 537054843589043319, 3347011585955472115, 3492330441544856135, 5484768628813601939, 11294556690345147619, 3801562553121391051, 950390638280347763, 237597659570086943, 59399414892521735, 4626535872150518339, 5768319986465017491, 10727011234386345891, 6014556790126280323, 5611483086795569675, 3999188273472727079, 7481608506421805603, 8646780154434978407, 2773443540865056803, 9221273954992793207, 4609587936565405303, 2773443540865056819, 8358549778283266663, 7481608506421805859, 3981173874963245095, 5606979487168199179, 6013430890219437699, 10726729759409635235, 5768319986465279635, 4626535872151566915, 59399414896716039, 237597659586864159, 950390638347456627, 3801562553389826507, 11294556673165278435, 5484768633108569235, 3492330458724725319, 3347011585687036659, 537055118466950263, 2148220473867801055, 8592881895471204215, 11686404498150915619, 8358901811572406099, 14988863172580072771, 4615220469191636235, 14137803056993323, 56551212227973291, 226204848911893167, 904819395647572667, 1251897541813423567, 312974385453355891, 1156622476077584155, 4900841637446783943, 5836896427789083891, 1038283396080466863, 4153133584321867447, 11620416552752674195, 11109905128021224275, 4185040548367583067, 1046260137091895767, 10057653392395392243, 3337125422162465743, 10104410979951971911, 16361160800270156691, 8701976218494927079, 5753880682951855395, 4568778658097869959, 17141560571364976131, 4285390142841244035, 1071347535710311011, 267836883927577755, 11403095243702277107, 8718892827390005187, 8939326612014432467, 2234831653003608119, 558707913250902031, 139676978312725507, 4646605263005569283, 1161651315751392323, 290412828937848083, 9295975244089237831, 6935679829449697363, 6935679829449697367, 9295975244089237847, 290412828937848147, 1161651315751392579, 4646605263005570307, 139676978312729603, 558707913250918415, 2234831653003673655, 8939326612014694611, 8718875235203960771, 11403090845655766003, 267836883944354971, 1071347535777419875, 4285390143109679491, 17141560572438717955, 4568778653802902663, 5753880681878113571, 8701976287214403815, 16361161075148063635, 10104412079463599687, 3337125422158271439, 10057653392394343667, 1046330505836073431, 4185322023344293723, 11109905128021207891, 11624920152380044691, 4153133584321866423, 1038283396080466607, 6125126803940795635, 6053763142053630919, 5768308494504972059 };
            var datafactory = (int x) => StringDataFactory<TStringFactory, TPipeline>.GetRandomStringData(x, lengthKMer).ToArray();
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, datafactory);

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), testsInBattery);

            return answer;
        }

        public static IEnumerable<BatteryDecodingResult> TestMassagersWeaker(double start, double end, double step, int testsInBattery, int lengthKMer, int size, IHashingFunctionFamily hfFamily, Type stringFactory, Type pipeline)
        {
            return (IEnumerable<BatteryDecodingResult>)typeof(BasicRetrievalTests).GetMethod(nameof(TestMassagersGeneric))!.MakeGenericMethod([stringFactory, pipeline]).Invoke(null, new object[] { start, end, step, testsInBattery, lengthKMer, size, hfFamily })!;
        }

        public static IEnumerable<BatteryDecodingResult> TestMassagersGenericWeaker<TStringFactory, TPipeline>(double start, double end, double step, int testsInBattery, int lengthKMer, int size, IHashingFunctionFamily hfFamily)
        where TStringFactory : struct, IStringFactory
        where TPipeline : struct, IPipeline
        {
            var test = Combinations.Combinations.HPW();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamilyLastWeaker(4, hfFamily).GetNoConflictFactory();


            var decoderFactory = test.DecoderFactoryFactory;
            Random random = new Random(2024_1);


            test.SetDecoderFactoryFactory((hfs) => new MassagerFactory<TStringFactory, TPipeline>(
                hfs,
                (HPWDecoderFactory<XORTable>)decoderFactory(hfs)));

            var batteryTest = new BatteryTest(start, end, step, size);
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, (int x) => StringDataFactory<TStringFactory, TPipeline>.GetRandomStringData(x, lengthKMer).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), testsInBattery);

            return answer;
        }

        public static IEnumerable<BatteryDecodingResult> TestRetrievalIBLT(double start, double end, double step, int testsInBattery, int size, IHashingFunctionFamily hfFamily)
        {
            var test = Combinations.Combinations.IBLT();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, hfFamily).GetFactory();


            var decoderFactory = test.DecoderFactoryFactory;
            Random random = new Random(2024_1);


            test.SetDecoderFactoryFactory((hfs) =>
                (HyperGraphDecoderFactory<IBLTTable>)decoderFactory(hfs));

            var batteryTest = new BatteryTest(start, end, step, size);
            var factory = new RetrievalTestFactory<IBLTTable, IBLTTable>(test, hashingFunction, (int x) => StringDataFactory<KMerStringFactory, None>.GetRandomStringData(x, 31).ToArray());
            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), testsInBattery);
            return answer;
        }


        public static IEnumerable<BatteryDecodingResult> TestRetrieval(double start, double end, double step, int testsInBattery, int size, IHashingFunctionFamily hfFamily)
        {
            var test = Combinations.Combinations.HPW();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, hfFamily).GetFactory();


            var decoderFactory = test.DecoderFactoryFactory;
            Random random = new Random(2024_1);


            test.SetDecoderFactoryFactory((hfs) =>
                (HPWDecoderFactory<XORTable>)decoderFactory(hfs));

            var batteryTest = new BatteryTest(start, end, step, size);
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, (int x) => StringDataFactory<KMerStringFactory, None>.GetRandomStringData(x, 31).ToArray());
            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), testsInBattery);
            return answer;
        }


        public static void TestMassagersConflict()
        {
            var test = Combinations.Combinations.HPW();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetNoConflictFactory();


            var decoderFactory = test.DecoderFactoryFactory;
            Random random = new Random();


            test.SetDecoderFactoryFactory((hfs) => new MassagerFactory<NumberStringFactory, CanonicalOrder>(
                hfs,
                (HPWDecoderFactory<XORTable>)decoderFactory(hfs)));

            int size = 10000;
            var batteryTest = new BatteryTest(0.7, 0.8, 0.02, size);
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomKMerData(x, 31).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }



        public static void TestXOR()
        {
            var test = Combinations.Combinations.HPW();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetNoConflictFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.75, 0.82, 0.005, size);
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomData(x).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }

        public static void TestXOR2()
        {
            var test = Combinations.Combinations.HPW();
            var hashingFunction = HashingFunctionCombinations.GetFromSameFamily(3, new LinearCongruenceFamily()).GetFactory();

            int size = 10000;
            var batteryTest = new BatteryTest(0.75, 0.82, 0.005, size);
            var factory = new RetrievalTestFactory<XORTable, XORTable>(test, hashingFunction, (int x) => RandomDataFactory.GetRandomData(x).ToArray());

            var answer = batteryTest.Run((numberItems) => factory.Get(size).Run(numberItems), 100);

            foreach (var x in answer)
            {
                Console.WriteLine(x.ToString());
            }
        }

    }
}
